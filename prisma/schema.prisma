// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  pseudo   String  @default("utilisateur") // valeur par d√©faut ajout√©e
  password String
  quizzes  UserQuiz[]
  groupId  Int?
  group    Group?  @relation(fields: [groupId], references: [id])
}

model Quiz {
  id       String    @id @default(uuid())
  title    String
  order    Int       @unique
  status   String    @default("LOCKED") // LOCKED | UNLOCKED
  questions Question[]
  users    UserQuiz[]
}

model Question {
  id       String  @id @default(uuid())
  quiz     Quiz    @relation(fields: [quizId], references: [id])
  quizId   String
  text     String
  answers  Answer[]
}

model Answer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  text       String
  isCorrect  Boolean
}

model UserQuiz {
  id         String  @id @default(uuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  quiz       Quiz    @relation(fields: [quizId], references: [id])
  quizId     String
  score      Float?
  completedAt DateTime?

  @@unique([userId, quizId]) // üëà Ajoute cette ligne pour cr√©er une cl√© unique composite
}


model Group {
  id    Int     @id @default(autoincrement()) // ID auto-incr√©ment√©
  code  String  @unique
  users User[]
}
